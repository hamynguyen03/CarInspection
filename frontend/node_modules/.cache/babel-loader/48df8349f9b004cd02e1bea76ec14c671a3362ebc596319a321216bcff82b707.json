{"ast":null,"code":"var _jsxFileName = \"/Users/hamynguyen/Downloads/todo-app/src/components/EditTodoForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const EditTodoForm = ({\n  editTodo,\n  task\n}) => {\n  _s();\n  const [value, setValue] = useState(task.task);\n  const [isLoading, setIsLoading] = useState(false); // Track the loading state\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsLoading(true);\n    try {\n      // Make the PUT request to update the inspection criteria in the backend\n      const response = await fetch(`http://localhost:8080/inspection-criteria/${task.id}/description`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          description: value\n        }) // Send the updated description\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update inspection criteria');\n      }\n\n      // After API call is successful, call editTodo to update the local state and exit editing mode\n      editTodo(value, task.id); // Ensure the task is updated in the UI\n    } catch (error) {\n      console.error('Error updating inspection criteria:', error);\n    } finally {\n      setIsLoading(false); // Reset loading state\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"TodoForm\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: value,\n      onChange: e => setValue(e.target.value),\n      className: \"todo-input\",\n      placeholder: \"Update criteria\",\n      disabled: isLoading // Disable input while loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"todo-btn\",\n      disabled: isLoading,\n      children: isLoading ? 'Updating...' : 'Update'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(EditTodoForm, \"MrAXz/QTwx4v3dFlVZGRXj1WKI8=\");\n_c = EditTodoForm;\nvar _c;\n$RefreshReg$(_c, \"EditTodoForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","EditTodoForm","editTodo","task","_s","value","setValue","isLoading","setIsLoading","handleSubmit","e","preventDefault","response","fetch","id","method","headers","body","JSON","stringify","description","ok","Error","error","console","onSubmit","className","children","type","onChange","target","placeholder","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hamynguyen/Downloads/todo-app/src/components/EditTodoForm.js"],"sourcesContent":["import React, { useState } from 'react';\n\nexport const EditTodoForm = ({ editTodo, task }) => {\n  const [value, setValue] = useState(task.task);\n  const [isLoading, setIsLoading] = useState(false); // Track the loading state\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    setIsLoading(true);\n\n    try {\n      // Make the PUT request to update the inspection criteria in the backend\n      const response = await fetch(`http://localhost:8080/inspection-criteria/${task.id}/description`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ description: value }), // Send the updated description\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update inspection criteria');\n      }\n\n      // After API call is successful, call editTodo to update the local state and exit editing mode\n      editTodo(value, task.id);  // Ensure the task is updated in the UI\n    } catch (error) {\n      console.error('Error updating inspection criteria:', error);\n    } finally {\n      setIsLoading(false); // Reset loading state\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"TodoForm\">\n      <input\n        type=\"text\"\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n        className=\"todo-input\"\n        placeholder=\"Update criteria\"\n        disabled={isLoading} // Disable input while loading\n      />\n      <button type=\"submit\" className=\"todo-btn\" disabled={isLoading}>\n        {isLoading ? 'Updating...' : 'Update'}\n      </button>\n    </form>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAACK,IAAI,CAACA,IAAI,CAAC;EAC7C,MAAM,CAACI,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEnD,MAAMW,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElBH,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI;MACF;MACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAA6CV,IAAI,CAACW,EAAE,cAAc,EAAE;QAC/FC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,WAAW,EAAEf;QAAM,CAAC,CAAC,CAAE;MAChD,CAAC,CAAC;MAEF,IAAI,CAACO,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;MACzD;;MAEA;MACApB,QAAQ,CAACG,KAAK,EAAEF,IAAI,CAACW,EAAE,CAAC,CAAC,CAAE;IAC7B,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC7D,CAAC,SAAS;MACRf,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB;EACF,CAAC;EAED,oBACER,OAAA;IAAMyB,QAAQ,EAAEhB,YAAa;IAACiB,SAAS,EAAC,UAAU;IAAAC,QAAA,gBAChD3B,OAAA;MACE4B,IAAI,EAAC,MAAM;MACXvB,KAAK,EAAEA,KAAM;MACbwB,QAAQ,EAAGnB,CAAC,IAAKJ,QAAQ,CAACI,CAAC,CAACoB,MAAM,CAACzB,KAAK,CAAE;MAC1CqB,SAAS,EAAC,YAAY;MACtBK,WAAW,EAAC,iBAAiB;MAC7BC,QAAQ,EAAEzB,SAAU,CAAC;IAAA;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CAAC,eACFpC,OAAA;MAAQ4B,IAAI,EAAC,QAAQ;MAACF,SAAS,EAAC,UAAU;MAACM,QAAQ,EAAEzB,SAAU;MAAAoB,QAAA,EAC5DpB,SAAS,GAAG,aAAa,GAAG;IAAQ;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEX,CAAC;AAAChC,EAAA,CA/CWH,YAAY;AAAAoC,EAAA,GAAZpC,YAAY;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}