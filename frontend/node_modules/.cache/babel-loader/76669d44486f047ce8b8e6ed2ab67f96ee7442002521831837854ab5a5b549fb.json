{"ast":null,"code":"var _jsxFileName = \"/Users/hamynguyen/Downloads/todo-app/src/components/CarInspectionResults.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport DetailWrapper from './DetailWrapper'; // Import the DetailWrapper\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst carStatusMapping = {\n  0: \"Not Inspected\",\n  1: \"Inspecting\",\n  2: \"Inspected\"\n};\nexport const CarInspectionResults = () => {\n  _s();\n  const navigate = useNavigate();\n  const [cars, setCars] = useState([]);\n  const [selectedCar, setSelectedCar] = useState(null);\n  const [isDropdownClicked, setIsDropdownClicked] = useState(false); // State to track dropdown interaction\n\n  const fetchCars = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/cars\", {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch cars.\");\n      }\n      const carData = await response.json(); // Parse the JSON response from the backend\n      setCars(carData); // Set the cars from the actual API response\n    } catch (error) {\n      console.error(\"Error fetching cars:\", error);\n      alert(\"Error fetching cars: \" + error.message);\n    }\n  };\n  const handleDropdownClick = () => {\n    if (!isDropdownClicked) {\n      fetchCars(); // Fetch the cars data when the dropdown is clicked for the first time\n      setIsDropdownClicked(true); // Set to true after the first interaction\n    }\n  };\n  const handleCarSelect = e => {\n    const carId = e.target.value;\n    const selectedCar = cars.find(car => car.carId === parseInt(carId));\n    setSelectedCar(selectedCar);\n  };\n  const handleAddInspection = () => {\n    navigate('/carinspectionreport');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"car-inspection-results\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Car Inspection Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropdown-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"car-dropdown\",\n        children: \"Inspected Car: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"car-dropdown\",\n        onClick: handleDropdownClick // Fetch cars when dropdown is clicked\n        ,\n        onChange: handleCarSelect,\n        defaultValue: \"\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"Select a car\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), cars.map(car => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: car.carId,\n          children: [car.name, \" - \", carStatusMapping[car.status]]\n        }, car.carId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), selectedCar && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(DetailWrapper, {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Details for \", selectedCar.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Status: \", carStatusMapping[selectedCar.status]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Inspections\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: selectedCar.inspections.length > 0 ? selectedCar.inspections.map(inspection => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [inspection.inspectionCriteria.criteriaDesc, \":\", \" \", inspection.good ? \"Passed\" : \"Failed\"]\n          }, inspection.carInspectionId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 19\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No inspections found.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"add-inspection-btn\",\n        onClick: handleAddInspection,\n        children: \"Add New Inspection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(CarInspectionResults, \"3W8bkKQS4/rmi3coKYSnJbA2JFw=\", false, function () {\n  return [useNavigate];\n});\n_c = CarInspectionResults;\nvar _c;\n$RefreshReg$(_c, \"CarInspectionResults\");","map":{"version":3,"names":["React","useState","DetailWrapper","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","carStatusMapping","CarInspectionResults","_s","navigate","cars","setCars","selectedCar","setSelectedCar","isDropdownClicked","setIsDropdownClicked","fetchCars","response","fetch","method","headers","ok","Error","carData","json","error","console","alert","message","handleDropdownClick","handleCarSelect","e","carId","target","value","find","car","parseInt","handleAddInspection","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onClick","onChange","defaultValue","disabled","map","name","status","inspections","length","inspection","inspectionCriteria","criteriaDesc","good","carInspectionId","_c","$RefreshReg$"],"sources":["/Users/hamynguyen/Downloads/todo-app/src/components/CarInspectionResults.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport DetailWrapper from './DetailWrapper'; // Import the DetailWrapper\nimport { useNavigate } from \"react-router-dom\";\n\nconst carStatusMapping = {\n  0: \"Not Inspected\",\n  1: \"Inspecting\",\n  2: \"Inspected\"\n};\n\nexport const CarInspectionResults = () => {\n  const navigate = useNavigate();\n  const [cars, setCars] = useState([]);\n  const [selectedCar, setSelectedCar] = useState(null);\n  const [isDropdownClicked, setIsDropdownClicked] = useState(false); // State to track dropdown interaction\n\n  const fetchCars = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/cars\", {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch cars.\");\n      }\n\n      const carData = await response.json(); // Parse the JSON response from the backend\n      setCars(carData); // Set the cars from the actual API response\n    } catch (error) {\n      console.error(\"Error fetching cars:\", error);\n      alert(\"Error fetching cars: \" + error.message);\n    }\n  };\n\n  const handleDropdownClick = () => {\n    if (!isDropdownClicked) {\n      fetchCars(); // Fetch the cars data when the dropdown is clicked for the first time\n      setIsDropdownClicked(true); // Set to true after the first interaction\n    }\n  };\n\n  const handleCarSelect = (e) => {\n    const carId = e.target.value;\n    const selectedCar = cars.find((car) => car.carId === parseInt(carId));\n    setSelectedCar(selectedCar);\n  };\n\n  const handleAddInspection = () => {\n    navigate('/carinspectionreport');\n  };\n\n  return (\n    <div className=\"car-inspection-results\">\n      <h1>Car Inspection Results</h1>\n\n      <div className=\"dropdown-container\">\n        <label htmlFor=\"car-dropdown\">Inspected Car: </label>\n        <select\n          id=\"car-dropdown\"\n          onClick={handleDropdownClick} // Fetch cars when dropdown is clicked\n          onChange={handleCarSelect}\n          defaultValue=\"\"\n        >\n          <option value=\"\" disabled>Select a car</option>\n          {cars.map((car) => (\n            <option key={car.carId} value={car.carId}>\n              {car.name} - {carStatusMapping[car.status]}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {selectedCar && (\n        <>\n          <DetailWrapper> {/* Wrapping only the details in DetailWrapper */}\n            <h2>Details for {selectedCar.name}</h2>\n            <p>Status: {carStatusMapping[selectedCar.status]}</p>\n            <h3>Inspections</h3>\n            <ul>\n              {selectedCar.inspections.length > 0 ? (\n                selectedCar.inspections.map((inspection) => (\n                  <li key={inspection.carInspectionId}>\n                    {inspection.inspectionCriteria.criteriaDesc}:{\" \"}\n                    {inspection.good ? \"Passed\" : \"Failed\"}\n                  </li>\n                ))\n              ) : (\n                <p>No inspections found.</p>\n              )}\n            </ul>\n          </DetailWrapper>\n\n          {/* Move the Add Inspection Button outside of the DetailWrapper */}\n          <button className=\"add-inspection-btn\" onClick={handleAddInspection}>\n            Add New Inspection\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}