{"ast":null,"code":"var _jsxFileName = \"/Users/hamynguyen/Downloads/todo-app/src/components/EditTodoForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const EditTodoForm = ({\n  editTodo,\n  task\n}) => {\n  _s();\n  const [value, setValue] = useState(task.task);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const handleSubmit = async e => {\n    e.preventDefault(); // Prevent default form submission\n    setIsLoading(true); // Start loading\n    setError(null); // Reset the error before making a new request\n\n    try {\n      // Make the PUT request to update the task description\n      const response = await fetch(`http://localhost:8080/inspection-criteria/${task.id}/description`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          description: value\n        }) // Send the updated description in the body\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update inspection criteria'); // Handle any non-success response\n      }\n\n      // If the API call is successful, update the task locally\n      editTodo(value, task.id); // Update the task and exit the editing mode\n    } catch (err) {\n      console.error('Error:', err); // Log the error to the console\n      setError('Failed to update inspection criteria. Please try again.'); // Show error to the user\n    } finally {\n      setIsLoading(false); // Stop loading\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"TodoForm\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: value,\n      onChange: e => setValue(e.target.value),\n      className: \"todo-input\",\n      placeholder: \"Update criteria\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"todo-btn\",\n      children: \"Update\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(EditTodoForm, \"oU+8nUDZW2+eXwT8i2Ruk56Y/KU=\");\n_c = EditTodoForm;\nvar _c;\n$RefreshReg$(_c, \"EditTodoForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","EditTodoForm","editTodo","task","_s","value","setValue","isLoading","setIsLoading","error","setError","handleSubmit","e","preventDefault","response","fetch","id","method","headers","body","JSON","stringify","description","ok","Error","err","console","onSubmit","className","children","type","onChange","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hamynguyen/Downloads/todo-app/src/components/EditTodoForm.js"],"sourcesContent":["import React, {useState} from 'react'\n\nexport const EditTodoForm = ({editTodo, task}) => {\n    const [value, setValue] = useState(task.task);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const handleSubmit = async (e) => {\n        e.preventDefault(); // Prevent default form submission\n        setIsLoading(true); // Start loading\n        setError(null); // Reset the error before making a new request\n    \n        try {\n          // Make the PUT request to update the task description\n          const response = await fetch(`http://localhost:8080/inspection-criteria/${task.id}/description`, {\n            method: 'PUT',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ description: value }), // Send the updated description in the body\n          });\n    \n          if (!response.ok) {\n            throw new Error('Failed to update inspection criteria'); // Handle any non-success response\n          }\n    \n          // If the API call is successful, update the task locally\n          editTodo(value, task.id); // Update the task and exit the editing mode\n        } catch (err) {\n          console.error('Error:', err); // Log the error to the console\n          setError('Failed to update inspection criteria. Please try again.'); // Show error to the user\n        } finally {\n          setIsLoading(false); // Stop loading\n        }\n      };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"TodoForm\">\n    <input type=\"text\" value={value} onChange={(e) => setValue(e.target.value)} className=\"todo-input\" placeholder='Update criteria' />\n    <button type=\"submit\" className='todo-btn'>Update</button>\n  </form>\n  )\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErC,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAACC,QAAQ;EAAEC;AAAI,CAAC,KAAK;EAAAC,EAAA;EAC9C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAACK,IAAI,CAACA,IAAI,CAAC;EAC7C,MAAM,CAACI,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMa,YAAY,GAAG,MAAOC,CAAC,IAAK;IAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC,CAAC,CAAC;IACpBL,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IACpBE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;IAEhB,IAAI;MACF;MACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAA6CZ,IAAI,CAACa,EAAE,cAAc,EAAE;QAC/FC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,WAAW,EAAEjB;QAAM,CAAC,CAAC,CAAE;MAChD,CAAC,CAAC;MAEF,IAAI,CAACS,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC,CAAC,CAAC;MAC3D;;MAEA;MACAtB,QAAQ,CAACG,KAAK,EAAEF,IAAI,CAACa,EAAE,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC,OAAOS,GAAG,EAAE;MACZC,OAAO,CAACjB,KAAK,CAAC,QAAQ,EAAEgB,GAAG,CAAC,CAAC,CAAC;MAC9Bf,QAAQ,CAAC,yDAAyD,CAAC,CAAC,CAAC;IACvE,CAAC,SAAS;MACRF,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB;EACF,CAAC;EAEL,oBACER,OAAA;IAAM2B,QAAQ,EAAEhB,YAAa;IAACiB,SAAS,EAAC,UAAU;IAAAC,QAAA,gBAClD7B,OAAA;MAAO8B,IAAI,EAAC,MAAM;MAACzB,KAAK,EAAEA,KAAM;MAAC0B,QAAQ,EAAGnB,CAAC,IAAKN,QAAQ,CAACM,CAAC,CAACoB,MAAM,CAAC3B,KAAK,CAAE;MAACuB,SAAS,EAAC,YAAY;MAACK,WAAW,EAAC;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnIrC,OAAA;MAAQ8B,IAAI,EAAC,QAAQ;MAACF,SAAS,EAAC,UAAU;MAAAC,QAAA,EAAC;IAAM;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtD,CAAC;AAET,CAAC;AAAAjC,EAAA,CAxCYH,YAAY;AAAAqC,EAAA,GAAZrC,YAAY;AAAA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}