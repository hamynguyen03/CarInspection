{"ast":null,"code":"var _jsxFileName = \"/Users/hamynguyen/Downloads/todo-app/src/components/EditTodoForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const EditTodoForm = ({\n  editTodo,\n  task\n}) => {\n  _s();\n  const [value, setValue] = useState(task.task);\n  const [isLoading, setIsLoading] = useState(false); // Track the loading state\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsLoading(true);\n    try {\n      // PUT request to the backend with the id and the updated description\n      const response = await fetch(`http://localhost:8080/inspection-criteria/${task.id}/description`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          description: value\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update inspection criteria');\n      }\n      const updatedCriteria = await response.json();\n      console.log('Inspection criteria updated:', updatedCriteria);\n\n      // After API call is successful, call editTodo to update the local state\n      editTodo(value, task.id);\n    } catch (error) {\n      console.error('Error updating inspection criteria:', error);\n    } finally {\n      setIsLoading(false); // Reset loading state\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"TodoForm\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: value,\n      onChange: e => setValue(e.target.value),\n      className: \"todo-input\",\n      placeholder: \"Update criteria\",\n      disabled: isLoading // Disable input while loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"todo-btn\",\n      disabled: isLoading,\n      children: isLoading ? 'Updating...' : 'Update'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(EditTodoForm, \"MrAXz/QTwx4v3dFlVZGRXj1WKI8=\");\n_c = EditTodoForm;\nvar _c;\n$RefreshReg$(_c, \"EditTodoForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","EditTodoForm","editTodo","task","_s","value","setValue","isLoading","setIsLoading","handleSubmit","e","preventDefault","response","fetch","id","method","headers","body","JSON","stringify","description","ok","Error","updatedCriteria","json","console","log","error","onSubmit","className","children","type","onChange","target","placeholder","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hamynguyen/Downloads/todo-app/src/components/EditTodoForm.js"],"sourcesContent":["import React, { useState } from 'react';\n\nexport const EditTodoForm = ({ editTodo, task }) => {\n  const [value, setValue] = useState(task.task);\n  const [isLoading, setIsLoading] = useState(false); // Track the loading state\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    setIsLoading(true);\n\n    try {\n      // PUT request to the backend with the id and the updated description\n      const response = await fetch(`http://localhost:8080/inspection-criteria/${task.id}/description`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ description: value }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update inspection criteria');\n      }\n\n      const updatedCriteria = await response.json();\n      console.log('Inspection criteria updated:', updatedCriteria);\n\n      // After API call is successful, call editTodo to update the local state\n      editTodo(value, task.id);\n    } catch (error) {\n      console.error('Error updating inspection criteria:', error);\n    } finally {\n      setIsLoading(false); // Reset loading state\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"TodoForm\">\n      <input\n        type=\"text\"\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n        className=\"todo-input\"\n        placeholder=\"Update criteria\"\n        disabled={isLoading} // Disable input while loading\n      />\n      <button type=\"submit\" className=\"todo-btn\" disabled={isLoading}>\n        {isLoading ? 'Updating...' : 'Update'}\n      </button>\n    </form>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAACK,IAAI,CAACA,IAAI,CAAC;EAC7C,MAAM,CAACI,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEnD,MAAMW,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElBH,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI;MACF;MACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAA6CV,IAAI,CAACW,EAAE,cAAc,EAAE;QAC/FC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,WAAW,EAAEf;QAAM,CAAC;MAC7C,CAAC,CAAC;MAEF,IAAI,CAACO,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,sCAAsC,CAAC;MACzD;MAEA,MAAMC,eAAe,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MAC7CC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEH,eAAe,CAAC;;MAE5D;MACArB,QAAQ,CAACG,KAAK,EAAEF,IAAI,CAACW,EAAE,CAAC;IAC1B,CAAC,CAAC,OAAOa,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC7D,CAAC,SAAS;MACRnB,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB;EACF,CAAC;EAED,oBACER,OAAA;IAAM4B,QAAQ,EAAEnB,YAAa;IAACoB,SAAS,EAAC,UAAU;IAAAC,QAAA,gBAChD9B,OAAA;MACE+B,IAAI,EAAC,MAAM;MACX1B,KAAK,EAAEA,KAAM;MACb2B,QAAQ,EAAGtB,CAAC,IAAKJ,QAAQ,CAACI,CAAC,CAACuB,MAAM,CAAC5B,KAAK,CAAE;MAC1CwB,SAAS,EAAC,YAAY;MACtBK,WAAW,EAAC,iBAAiB;MAC7BC,QAAQ,EAAE5B,SAAU,CAAC;IAAA;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CAAC,eACFvC,OAAA;MAAQ+B,IAAI,EAAC,QAAQ;MAACF,SAAS,EAAC,UAAU;MAACM,QAAQ,EAAE5B,SAAU;MAAAuB,QAAA,EAC5DvB,SAAS,GAAG,aAAa,GAAG;IAAQ;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEX,CAAC;AAACnC,EAAA,CAlDWH,YAAY;AAAAuC,EAAA,GAAZvC,YAAY;AAAA,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}